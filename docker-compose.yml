# =============================================================================
# Customer Support AI Agent - Development Docker Compose Configuration
# =============================================================================

version: "3.8"

services:
  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: customer-support-backend-dev
    restart: unless-stopped
    environment:
      - DATABASE_URL=sqlite:///./customer_support.db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CHROMA_PERSIST_DIRECTORY=./chroma_db
      - SECRET_KEY=dev-secret-key-change-in-production
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - ENABLE_CORS=true
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - PROMETHEUS_ENABLED=true
      - REACT_APP_API_URL=http://localhost:8000
    volumes:
      - ./backend:/app
      - ./data/uploads:/app/uploads
      - ./data/chroma:/app/chroma
      - ./data/logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - chroma
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/liveness"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - customer-support-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: customer-support-frontend-dev
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - customer-support-network

  # Redis Service (for caching)
  redis:
    image: redis:7-alpine
    container_name: customer-support-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - customer-support-network

  # Chroma Vector Database
  chroma:
    image: chromadb/chroma:latest
    container_name: customer-support-chroma-dev
    restart: unless-stopped
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_LOG_LEVEL=INFO
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8001:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - customer-support-network

  # PostgreSQL (optional - for production-like development)
  postgres:
    image: postgres:15-alpine
    container_name: customer-support-postgres-dev
    restart: unless-stopped
    environment:
      - POSTGRES_DB=customer_support
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d customer_support"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - customer-support-network
    profiles:
      - postgres  # Only start with --profile postgres

  # Prometheus (for monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: customer-support-prometheus-dev
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - customer-support-network
    profiles:
      - monitoring  # Only start with --profile monitoring

  # Grafana (for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: customer-support-grafana-dev
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_LOG_LEVEL=INFO
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - customer-support-network
    profiles:
      - monitoring  # Only start with --profile monitoring

  # Nginx (for reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: customer-support-nginx-dev
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - customer-support-network
    profiles:
      - nginx  # Only start with --profile nginx

  # Mailhog (for email testing in development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: customer-support-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI
    networks:
      - customer-support-network
    profiles:
      - mail  # Only start with --profile mail

  # Adminer (for database management)
  adminer:
    image: adminer:latest
    container_name: customer-support-adminer-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - customer-support-network
    profiles:
      - tools  # Only start with --profile tools

  # Redis Commander (for Redis management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: customer-support-redis-commander-dev
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - customer-support-network
    profiles:
      - tools  # Only start with --profile tools

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  customer-support-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
